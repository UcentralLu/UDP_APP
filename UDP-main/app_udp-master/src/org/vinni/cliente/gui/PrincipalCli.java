package org.vinni.cliente.gui;

import org.vinni.dto.MiDatagrama;

import javax.swing.*;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class PrincipalCli extends JFrame {

    private final int PORT = 12345;
    private final String MULTICAST_GROUP = "230.0.0.1";
    private final int MULTICAST_PORT = 12346;
    private String nombreCliente = "";
    private String directorioCliente;    
    

    public PrincipalCli() {
        initComponents();

        this.btEnviar.setEnabled(true);
        this.mensajesTxt.setEditable(false);
        this.nombreCliente = nombreTxt.getText().trim();
        this.directorioCliente = "cliente_" + System.currentTimeMillis(); // Carpeta única por cliente
        new File(directorioCliente).mkdirs(); // Crear carpeta
        new Thread(this::recibirMensajesMulticast).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        this.setTitle("Cliente ");
        jLabel1 = new JLabel();
        jScrollPane1 = new JScrollPane();
        mensajesTxt = new JTextArea();
        mensajeTxt = new JTextField();
        jLabel2 = new JLabel();
        btEnviar = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("CLIENTE UDP : LUING");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(110, 10, 250, 17);

        mensajesTxt.setColumns(20);
        mensajesTxt.setRows(5);

        jScrollPane1.setViewportView(mensajesTxt);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 210, 410, 110);

        mensajeTxt.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        getContentPane().add(mensajeTxt);
        mensajeTxt.setBounds(40, 120, 350, 30);

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel2.setText("Mensaje:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 90, 120, 30);

        nombreTxt = new JTextField();
        jLabel3 = new JLabel();
        btSeleccionarArchivo = new JButton();
        fileChooser = new JFileChooser();

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 14));
        jLabel3.setText("Nombre:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 30, 120, 30);

        nombreTxt.setFont(new java.awt.Font("Verdana", 0, 14));
        getContentPane().add(nombreTxt);
        nombreTxt.setBounds(40, 60, 350, 30);

        btSeleccionarArchivo.setText("Seleccionar Archivo");
        btSeleccionarArchivo.addActionListener(evt -> seleccionarArchivo());
        getContentPane().add(btSeleccionarArchivo);
        btSeleccionarArchivo.setBounds(40, 160, 200, 27);

        btEnviar.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        btEnviar.setText("Enviar");
        btEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarActionPerformed(evt);
            }
        });
        getContentPane().add(btEnviar);
        btEnviar.setBounds(327, 160, 120, 27);

        setSize(new java.awt.Dimension(491, 375));
        setLocationRelativeTo(null);
    }// </editor-fold>

    private void btEnviarActionPerformed(java.awt.event.ActionEvent evt) {
        if (nombreCliente.isEmpty()) {
            nombreCliente = nombreTxt.getText().trim();
            if (nombreCliente.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar un nombre antes de enviar.");
                return;
            }
        }
        
        this.enviarMensaje();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalCli().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify

    private JButton btEnviar;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JScrollPane jScrollPane1;
    private JTextArea mensajesTxt;
    private JTextField mensajeTxt;
    private JTextField nombreTxt;
    private JButton btSeleccionarArchivo;
    private JFileChooser fileChooser;
    private File selectedFile;    
    // End of variables declaration

    private void seleccionarArchivo() {
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            if (!selectedFile.getName().endsWith(".mp3")) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un archivo .mp3");
                selectedFile = null;
            }
        }
    }

    private void enviarMensaje() {
        String ip = "127.0.0.1";
        String mensaje = mensajeTxt.getText().trim();

        if (nombreCliente.isEmpty() || mensaje.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar su nombre y un mensaje para enviar");
            return;
        }

        String contenido = nombreCliente + ": " + mensaje;
        DatagramPacket mensajeDG = MiDatagrama.crearDataG(ip, PORT, contenido);
     
        try (DatagramSocket canal = new DatagramSocket()) {
            canal.send(mensajeDG);
            mensajesTxt.append("Mensaje enviado\n");
    
            if (selectedFile != null) {
                enviarArchivo(canal, ip, selectedFile);
            }
        } catch (IOException ex) {
            Logger.getLogger(PrincipalCli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void enviarArchivo(DatagramSocket canal, String ip, File file) {
        try {
            InetAddress direccion = InetAddress.getByName(ip);
            byte[] buffer = new byte[1024];
        
            // Se pasa el nombre del cliente para identificar al remitente
            DatagramPacket paqueteInfo = MiDatagrama.crearPaqueteInfoArchivo(ip, PORT, file.getName(), file.length(), nombreCliente);
            canal.send(paqueteInfo);
            
            try (FileInputStream fis = new FileInputStream(file)) {
                int bytesRead;
                while ((bytesRead = fis.read(buffer)) != -1) {
                    DatagramPacket paquete = MiDatagrama.crearPaqueteArchivo(ip, PORT, buffer, bytesRead);
                    canal.send(paquete);
                    Thread.sleep(10);
                }
            }
        
            DatagramPacket paqueteFin = MiDatagrama.crearDataG(ip, PORT, "EOF");
            canal.send(paqueteFin);
        
            mensajesTxt.append("Archivo enviado: " + file.getName() + "\n");
        
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(PrincipalCli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void recibirMensajesMulticast() {
        try (MulticastSocket socket = new MulticastSocket(MULTICAST_PORT)) {
            InetAddress group = InetAddress.getByName(MULTICAST_GROUP);
            socket.joinGroup(group);
            
            byte[] buffer = new byte[1024];
            while (true) {
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);
                String mensaje = new String(packet.getData(), 0, packet.getLength());
                
                if (mensaje.startsWith("FILE:")) {
                    recibirArchivo(socket, mensaje);
                } else {
                    mensajesTxt.append(mensaje + "\n");
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(PrincipalCli.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void recibirArchivo(MulticastSocket socket, String infoArchivo) throws IOException {
        String[] partes = infoArchivo.split(":");
        // Ahora se espera que existan al menos 4 partes: FILE, nombreArchivo, tamanoArchivo y sender
        if (partes.length < 4) return;
        
        String fileName = partes[1];
        int fileSize = Integer.parseInt(partes[2]);
        String sender = partes[3];
        
        // Si el remitente es el mismo cliente, se ignora la recepción del archivo
        if (sender.equals(nombreCliente)) {
            //mensajesTxt.append("Se ignora archivo enviado por mi mismo.\n");
            return;
        }
        
        File receivedFile = new File(directorioCliente, fileName);
        
        try (FileOutputStream fos = new FileOutputStream(receivedFile)) {
            byte[] buffer = new byte[1024];
            int bytesRead, totalBytes = 0;
            while (totalBytes < fileSize) {
                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
                socket.receive(packet);
                String mensaje = new String(packet.getData(), 0, packet.getLength()).trim();
                if (mensaje.equals("EOF")) break;
                bytesRead = packet.getLength();
                fos.write(buffer, 0, bytesRead);
                totalBytes += bytesRead;
            }
        }
        mensajesTxt.append("Archivo recibido y guardado en " + directorioCliente + "\n");
    }
    
}